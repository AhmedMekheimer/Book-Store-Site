@model Dictionary<ApplicationUser, string>
@{
	ViewData["Title"] = "User Management";
}

<div class="admin-container">
	<div class="page-header">
		<h1 class="page-title">Application Users</h1>
		@if (User.IsInRole(SD.SuperAdmin) || User.IsInRole(SD.Admin))
		{
			<a class="btn btn-create" asp-area="Admin" asp-controller="User" asp-action="Create">
				<i class="fas fa-plus-circle"></i> Create User
			</a>
		}
	</div>

	<!-- Search Section -->
	<div class="search-container">
		<div class="search-box">
			<i class="fas fa-search"></i>
			<input type="text"
				   id="searchInput"
				   placeholder="Search Users...">
		</div>
	</div>

	<div class="user-management-container">
		@if (Model.Count == 0)
		{
			<div class="empty-state">
				<i class="fas fa-user-slash"></i>
				<h3>No Users Found</h3>
			</div>
		}
		else
		{
			<div class="table-responsive">
				<table class="user-table">
					<thead>
						<tr>
							<th>Name</th>
							<th>Username</th>
							<th>Email</th>
							<th>Roles</th>
							@if (User.IsInRole(SD.SuperAdmin) || User.IsInRole(SD.Admin))
							{
								<th>Actions</th>
							}
						</tr>
					</thead>
					<tbody>
						@foreach (var user in Model.Keys)
						{
							<tr>
								<td data-label="Name">
									<div class="user-info">
										<div>@user.FirstName @user.LastName</div>
									</div>
								</td>
								<td data-label="Username">@user.UserName</td>
								<td data-label="Email">@user.Email</td>
								<td data-label="Roles">
									@Model[user]
								</td>
								@if (User.IsInRole(SD.SuperAdmin) || User.IsInRole(SD.Admin))
								{
									<td data-label="Actions">
										<div class="action-buttons">
											@if (!(Model[user].Contains(SD.SuperAdmin) && User.IsInRole(SD.Admin)))
											{
												<a href="/Admin/User/Edit/@user.Id" type="button" class="btn-action btn-edit" title="Edit">
													Edit
												</a>
											}

											@if (!Model[user].Contains(SD.SuperAdmin))
											{
												@if (user.LockoutEnabled)
												{
													<a href="/Admin/User/BlockUnBlock/@user.Id" class="btn-action btn-block" title="Block">
														Block
													</a>
												}
												else
												{
													<a href="/Admin/User/BlockUnBlock/@user.Id" class="btn-action btn-unblock" title="Unblock">
														Remove Block
													</a>
												}
												<a class="btn btn-action btn-delete"
												   asp-area="Admin"
												   asp-controller="User"
												   asp-action="Delete"
												   asp-route-id="@user.Id"
												   data-name="@user.UserName">
													Delete
												</a>
											}
										</div>
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>
</div>

@section Scripts 
{
	<partial name="_NotificationPartial.cshtml" />
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script>
		document.addEventListener('DOMContentLoaded', function() 
		{
			// Search functionality
			const searchInput = document.getElementById('searchInput');
			if (searchInput) {
				// Store original rows for resetting search
				const originalRows = Array.from(document.querySelectorAll('.user-table tbody tr'));

				// Function to perform search
				function performSearch() {
					const searchTerm = searchInput.value.trim().toLowerCase();

					// If search is empty, show all rows
					if (searchTerm === '') {
						originalRows.forEach(row => row.style.display = '');
						return;
					}

					// Search through all rows
					originalRows.forEach(row => {
						const name = (row.querySelector('[data-label="Name"]')?.textContent || '').toLowerCase();
						const username = (row.querySelector('[data-label="Username"]')?.textContent || '').toLowerCase();
						const email = (row.querySelector('[data-label="Email"]')?.textContent || '').toLowerCase();
						const roles = (row.querySelector('[data-label="Roles"]')?.textContent || '').toLowerCase();

						// Show row if any field matches the search
						if (name.includes(searchTerm) ||
							username.includes(searchTerm) ||
							email.includes(searchTerm) ||
							roles.includes(searchTerm)) {
							row.style.display = '';
						} else {
							row.style.display = 'none';
						}
					});
				}

				// Add event listener
				searchInput.addEventListener('input', performSearch);

				// Perform initial search if there's a value
				if (searchInput.value) {
					performSearch();
				}
			}

			// Delete buttons with confirmation
			const deleteButtons = document.querySelectorAll(".btn-delete");

			deleteButtons.forEach(button => {
				button.addEventListener("click", function(e) {
					e.preventDefault(); // Prevent immediate navigation

					// Get URL and user info
					const deleteUrl = this.getAttribute("href");
					const userName = this.getAttribute("data-name");
					const row = this.closest('tr');

					// Show confirmation dialog
					Swal.fire({
						title: 'Are you sure?',
						text: `You are about to delete the user "${userName}". This action cannot be undone.`,
						icon: 'warning',
						showCancelButton: true,
						confirmButtonColor: '#d33',
						cancelButtonColor: '#3085d6',
						confirmButtonText: 'Yes, delete user',
						cancelButtonText: 'Cancel',
						reverseButtons: true
					}).then((result) => {
						if (result.isConfirmed) {
							// Visual feedback
							row.classList.add('deleting');
							this.classList.add('deleting');

							// Change button to show loading state
							const originalHTML = this.innerHTML;
							this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
							this.disabled = true;

							// Add a short delay to show the loading state
							setTimeout(() => {
								// Navigate to delete URL
								window.location.href = deleteUrl;
							}, 500);
						}
					});
				});
			});
		});
	</script>
}