@model BookCatAuthPubsVM

<div class="admin-container">
	<div class="page-header">
		<h1 class="page-title">Edit Book</h1>
		<a class="btn btn-back" asp-area="Admin" asp-controller="Book" asp-action="Index">
			Back to Books
		</a>
	</div>

	<div class="create-form-container">
		<form asp-action="Edit" method="post" enctype="multipart/form-data">
			<div class="form-group">
				<input type="hidden" name="id" value="@Model.Book.Id" />
			</div>

			<div class="form-group">
				<label for="Name">Name</label>
				<input value="@Model.Book.Name" type="text" id="Name" name="Name" class="form-control" placeholder="Enter book name" required>
			</div>

			<div class="form-group">
				<label for="Price">Price</label>
				<input value="@Model.Book.Price" type="number" id="Price" name="Price" class="form-control" placeholder="Enter book price" min="1"
					   step="0.01"
					   required
					   oninput="validity.valid||(value='');">
			</div>

			<!-- Existing Images -->
			<div class="form-group mb-3">
				<label>Existing Images</label>
				<div class="d-flex flex-wrap gap-2" id="existingImagesContainer">
					@foreach (var file in Model.Book.Files.Where(f => f.FileType == FileType.Image))
					{
						<div class="position-relative" id="existingImage_@file.Id">
							<img src="~/Files/@file.Name" alt="@file.Name" class="img-thumbnail" style="max-height: 150px;">
							<button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0"
									onclick="toggleFileDeletion(@file.Id, this)">
								&times;
							</button>
							<!-- Hidden input for existing file ID -->
							<input type="hidden" name="ExistingFilesIds" value="@file.Id" id="fileInput_@file.Id">
						</div>
					}
				</div>
			</div>

			<!-- New Images -->
			<div class="form-group mb-3">
				<label>Upload New Images</label>
				<input type="file" class="form-control" accept="image/*" id="files" name="files" multiple onchange="previewImages(event)" required>
				<div id="imagePreviews" class="d-flex flex-wrap gap-2 mt-2"></div>
			</div>

			<!-- Existing Videos -->
			<div class="form-group mb-3">
				<label>Existing Videos</label>
				<div class="d-flex flex-wrap gap-2" id="existingVideosContainer">
					@foreach (var file in Model.Book.Files.Where(f => f.FileType == FileType.Video))
					{
						<div class="position-relative" id="existingVideo_@file.Id">
							<p>@file.Name</p>
							<button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0"
									onclick="toggleFileDeletion(@file.Id, this)">
								&times;
							</button>
							<!-- Hidden input for existing file ID -->
							<input type="hidden" name="ExistingFilesIds" value="@file.Id" id="fileInput_@file.Id">
						</div>
					}
				</div>
			</div>

			<!--New Videos-->
			<div class="form-group mb-3">
				<label>Upload New Videos</label>
				<input type="file" class="form-control" accept="video/*" id="files" name="files" multiple required>
			</div>

			<div class="form-group mb-3">
				<label for="AvailableCopies">No. Available Copies</label>
				<input value="@Model.Book.AvailableCopies" type="number" id="AvailableCopies" name="AvailableCopies" class="form-control" placeholder="Enter No. Available Copies" min="0" required oninput="validity.valid||(value='');">
			</div>

			<div class="form-group mb-3">
				<label for="CategoryId">Category</label>
				<select name="categoryId" class="form-control" required>
					@foreach (var cat in Model.Categories)
					{
						if (Model.Book.CategoryId == cat.Id)
						{
							<option value="@cat.Id" selected>@cat.Name</option>
						}
						else
						{
							<option value="@cat.Id">@cat.Name</option>
						}
					}
				</select>
			</div>

			<div class="form-group mb-3">
				<label for="AuthorsIds">Select Authors:</label>
				<select name="AuthorsIds" id="AuthorsIds" multiple class="multi-select" style="width:100%" required>
					@foreach (var bookauth in Model.Book.Authors)
					{
						<option value="@bookauth.Id" selected>@bookauth.Name</option>
					}
					@foreach (var auth in Model.Authors)
					{
						foreach (var bookauth in Model.Book.Authors)
						{
							if (bookauth.Id != auth.Id)
							{
								<option value="@auth.Id">@auth.Name</option>
							}
						}

					}
				</select>
			</div>

			<div class="form-group mb-3">
				<label for="PublishersIds">Select Publishing Houses:</label>
				<select name="PublishersIds" id="PublishersIds" multiple class="multi-select" style="width:100%" required>
					@foreach (var bookpub in Model.Book.PublishingHouses)
					{
						<option value="@bookpub.Id" selected>@bookpub.Name</option>
					}
					@foreach (var pub in Model.PublishingHouses)
					{
						foreach (var bookpub in Model.Book.PublishingHouses)
						{
							if (bookpub.Id != pub.Id)
							{
								<option value="@pub.Id">@pub.Name</option>
							}
						}
					}
				</select>
			</div>

			<div class="form-actions">
				<button type="reset" class="btn btn-cancel">
					Reset
				</button>
				<button type="submit" class="btn btn-create">
					Save Changes
				</button>
			</div>
		</form>
	</div>
</div>
@section Scripts {
	<script>
		// Single toggle function for both Existing images and videos
		function toggleFileDeletion(fileId, button) {
			const container = button.closest('.position-relative');
			const hiddenInput = container.querySelector('input[name="ExistingFilesIds"]');

			if (!hiddenInput) {
				// If input doesn't exist (shouldn't happen), create it
				const newInput = document.createElement('input');
				newInput.type = 'hidden';
				newInput.name = 'ExistingFilesIds';
				newInput.value = fileId;
				newInput.id = `fileInput_${fileId}`;
				container.appendChild(newInput);
				return;
			}

			if (hiddenInput.disabled) {
				// Undo deletion - re-enable the input
				hiddenInput.disabled = false;
				button.innerHTML = '&times;';
				button.classList.remove('btn-secondary');
				button.classList.add('btn-danger');
				container.style.opacity = '1';
			} else {
				// Mark for deletion - disable the input
				hiddenInput.disabled = true;
				button.innerHTML = 'Undo';
				button.classList.remove('btn-danger');
				button.classList.add('btn-secondary');
				container.style.opacity = '0.5';
			}
		}

		//Preview Multiple Images
		function previewImages(event)
		{
			const input = event.target;
			const previewContainer = document.getElementById('imagePreviews');

			// Clear previous previews
			previewContainer.innerHTML = '';

			if (input.files && input.files.length > 0) {
				// Array to store files for later upload
				window.imageFiles = Array.from(input.files);

				// Create preview for each file
				Array.from(input.files).forEach((file, index) => {
					if (!file.type.match('image.*')) {
						return; // Skip non-image files
					}

					const reader = new FileReader();
					const previewDiv = document.createElement('div');
					previewDiv.className = 'position-relative d-inline-block';

					reader.onload = function(e) {
						const img = document.createElement('img');
						img.src = e.target.result;
						img.className = 'img-thumbnail';
						img.style.maxHeight = '200px';
						img.style.marginRight = '10px';
						img.style.marginBottom = '10px';

						// Add remove button
						const removeBtn = document.createElement('button');
						removeBtn.innerHTML = '&times;';
						removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 end-0';
						removeBtn.style.transform = 'translate(50%, -50%)';
						removeBtn.onclick = () => removeImage(index);

						previewDiv.appendChild(img);
						previewDiv.appendChild(removeBtn);
						previewContainer.appendChild(previewDiv);
					};

					reader.readAsDataURL(file);
				});
			}
		}

		//Image Removal Function
				function removeImage(index)
		{
			// Remove from preview
			const previews = document.getElementById('imagePreviews');
			previews.removeChild(previews.children[index]);

			// Remove from files array
			window.imageFiles.splice(index, 1);

			// Update the CORRECT file input
			const dataTransfer = new DataTransfer();
			window.imageFiles.forEach(file => dataTransfer.items.add(file));

			// Target the image input specifically
			document.getElementById('imgFiles').files = dataTransfer.files;
		}

		$(document).ready(function() {
			$('.multi-select').select2();
		});
		// DOMContentLoaded handler
		document.addEventListener('DOMContentLoaded', function() {
			// Fix: Use existing elements only
			const nameInput = document.getElementById('Name');
			const previewName = document.getElementById('previewName');
			const imageInput = document.getElementById('Picture');
			const imagePreview = document.getElementById('imagePreview');
			const form = document.querySelector('form');
			if (nameInput && previewName) {
				nameInput.addEventListener('input', function() {
					previewName.textContent = this.value || 'Book Name';
				});
			}
			if (imageInput && imagePreview) {
				imageInput.addEventListener('input', function() {
					const url = this.value.trim();
					const previewText = imagePreview.querySelector('.preview-text');
					if (url) {
						imagePreview.innerHTML = `<img src="${url}" alt="Preview"
								style="max-width: 100%; max-height: 200px;"
								onerror="this.style.display='none';
								document.querySelector('.preview-text').style.display='block'">`;
						if (previewText) previewText.style.display = 'none';
					} else {
						imagePreview.innerHTML = '<div class="preview-text">Image preview will appear here</div>';
					}
				});
			}
			if (form && nameInput) {
				form.addEventListener('submit', function(e) {
					if (!nameInput.value.trim()) {
						e.preventDefault();
						nameInput.focus();
						alert('Book name is required');
					}
				});
			}
			// Function to validate positive numbers
			const setupPositiveNumberValidation = (elementId) => {
				const input = document.getElementById(elementId);
				if (input) {
					// Validate on change
					input.addEventListener('change', function() {
						if (parseFloat(this.value) < 0) {
							this.value = '';
							alert('Please enter a positive number');
						}
					});
					// Prevent typing negative values
					input.addEventListener('keydown', function(e) {
						if (e.key === '-' || e.key === 'e' || e.key === 'E') {
							e.preventDefault();
						}
					});
				}
			};
			// Set up validation for both fields
			setupPositiveNumberValidation('Price');
			setupPositiveNumberValidation('AvailableCopies');
		});
	</script>
}