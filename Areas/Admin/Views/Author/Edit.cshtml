@model Author
<div class="admin-container">
	<div class="page-header">
		<h1 class="page-title">Edit New Author</h1>
		<a class="btn btn-back" asp-area="Admin" asp-controller="Author" asp-action="Index">
			Back to Authors
		</a>
	</div>

	<div class="create-form-container">
		<form asp-action="Edit" method="post" enctype="multipart/form-data">
				<input type="hidden" name="id" value="@Model.Id" />

			<div class="form-group">
				<label for="Name">Author Name</label>
				<input value="@Model.Name" type="text" id="Name" name="Name" class="form-control" placeholder="Enter author name" required>
				<span style="color:red" style="color:red" class="text-danger" asp-validation-for="Name"></span>
			</div>

			<!-- Existing Image -->
			<div class="form-group mb-3">
				<label>Author Image</label>
				<div class="d-flex flex-wrap gap-2" id="existingImagesContainer">
					@foreach (var file in Model.Files.Where(f => f.FileType == FileType.Image))
					{
						<div class="position-relative" id="existingImage_@file.Id">
							<img src="~/Files/@file.Name" alt="@file.Name" class="img-thumbnail" style="max-height: 150px;">
						</div>
					}
				</div>
			</div>

			<!-- New Image Upload -->
			<div class="form-group mb-3">
				<label>Upload New Image</label>
				<input type="file" class="form-control" accept="image/*" id="file" name="file">
			</div>

			<div class="form-group">
				<label for="Bio">Bio</label>
				<textarea id="Bio" name="Bio" class="form-control" rows="4" placeholder="Enter author bio">@Model.Bio</textarea>
				<span style="color:red" style="color:red" class="text-danger" asp-validation-for="Bio"></span>
			</div>

			<!-- Social Media Links -->
			<div class="form-section">
				<h3>Social Media Links</h3>
				<div class="form-group">
					<label>Add social media profiles</label>
					<div id="socialMediasContainer">
						@for (int i = 0; i < Model.SocialMedias.Count; i++)
						{
							<div class="input-group mb-2">
								<input type="text" name="SocialMedias" class="form-control"
									   value="@Model.SocialMedias[i]"
									   placeholder="https://example.com/username" required>
								<button type="button" class="btn btn-remove"
								@(Model.SocialMedias.Count == 1 ? "disabled" : "")>
									<i class="fas fa-times"></i>
								</button>
							</div>
						}
					</div>
					<button type="button" id="addSocialMedia" class="btn btn-add">
						Add Another Link
					</button>
				</div>
			</div>
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

			<div class="form-actions">
				<button type="reset" class="btn btn-cancel">
					Reset
				</button>
				<button type="submit" class="btn btn-create">
					Save Changes
				</button>
			</div>
		</form>
	</div>
</div>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// --- Social Media Fields Management ---
			const container = document.getElementById('socialMediasContainer');
			const addButton = document.getElementById('addSocialMedia');

			if (container && addButton) {
				// Function to update remove buttons state
				function updateRemoveButtons() {
					const groups = container.querySelectorAll('.input-group');
					groups.forEach(group => {
						const removeBtn = group.querySelector('.btn-remove');
						removeBtn.disabled = groups.length === 1;
					});
				}

				// Function to remove a field group
				function removeFieldGroup(group) {
					container.removeChild(group);
					updateRemoveButtons();
				}

				// Add new social media field
				addButton.addEventListener('click', function() {
					const newGroup = document.createElement('div');
					newGroup.className = 'input-group mb-2';

					newGroup.innerHTML = `
						<input type="text" name="SocialMedias" class="form-control" placeholder="https://example.com/username" required>
						<button type="button" class="btn btn-remove">
							<i class="fas fa-times"></i>
						</button>
					`;

					container.appendChild(newGroup);

					// Add event to the new remove button
					newGroup.querySelector('.btn-remove').addEventListener('click', function() {
						removeFieldGroup(newGroup);
					});

					updateRemoveButtons();
				});

				// Add event to existing remove buttons
				container.querySelectorAll('.btn-remove').forEach(button => {
					button.addEventListener('click', function() {
						const group = this.closest('.input-group');
						removeFieldGroup(group);
					});
				});

				// Initialize button states
				updateRemoveButtons();
			}

			// Client-Side Validation
			const form = document.querySelector('form');
			if (form) {
				form.addEventListener('submit', function(e) {
					if (!nameInput?.value.trim()) {
						e.preventDefault();
						nameInput.focus();
						alert('Author name is required');
						return false;
					}

					// Validate social media links
					const socialInputs = container.querySelectorAll('input[name="SocialMedias"]');
					let hasValue = false;

					socialInputs.forEach(input => {
						if (input.value.trim()) {
							hasValue = true;
						}
					});

					if (!hasValue) {
						e.preventDefault();
						alert('Please add at least one social media link');
						return false;
					}
					return true;
				});
			}
		});
	</script>
}